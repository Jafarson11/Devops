
pipeline {
    agent any
    
    environment {
        AZURE_SUBSCRIPTION_ID = credentials('azure-subscription-id')
        AZURE_TENANT_ID = credentials('azure-tenant-id')
        AZURE_CLIENT_ID = credentials('azure-client-id')
        AZURE_CLIENT_SECRET = credentials('azure-client-secret')
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                checkout scm
            }
        }
        
        stage('Azure Login') {
            steps {
                echo 'Logging into Azure...'
                bat '''
                    az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% --tenant %AZURE_TENANT_ID%
                    az account set --subscription %AZURE_SUBSCRIPTION_ID%
                '''
            }
        }
        
        stage('Terraform Init') {
            steps {
                echo 'Initializing Terraform...'
                dir('terraform') {
                    bat 'terraform init -upgrade'
                }
            }
        }
        
        stage('Terraform Validate') {
            steps {
                echo 'Validating Terraform configuration...'
                dir('terraform') {
                    bat 'terraform validate'
                }
            }
        }
        
        stage('Terraform Plan') {
            steps {
                echo 'Planning Terraform changes...'
                dir('terraform') {
                    bat 'terraform plan -out=tfplan'
                }
            }
        }
        
        stage('Terraform Apply') {
            steps {
                echo 'Applying Terraform changes...'
                dir('terraform') {
                    bat 'terraform apply -auto-approve tfplan'
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Installing Python dependencies...'
                dir('app') {
                    bat 'pip install -r requirements.txt'
                }
            }
        }
        
        stage('Deploy to Azure App Service') {
            steps {
                echo 'Deploying Flask application to Azure...'
                dir('app') {
                    bat 'az webapp up --name devops-webapp-yourname123 --resource-group devops-project-rg --runtime PYTHON:3.9 --location eastasia'
                }
            }
        }
    }
    
    post {
        success {
            echo '✅ Pipeline executed successfully!'
            echo 'Application deployed to Azure App Service'
        }
        failure {
            echo '❌ Pipeline execution failed!'
        }
        always {
            echo 'Cleaning up...'
        }
    }
}
